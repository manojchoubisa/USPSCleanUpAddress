<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KellermanSoftware.USPS-Standardization</name>
    </assembly>
    <members>
        <member name="T:KellermanSoftware.Licensing.IniFile">
            <summary>
            Create a New INI file to store or load data
            <BR /><b>Author:</b>  Gregory T. Finzer<BR />
            <b>Date:</b>  10/12/2002
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.#ctor(System.String)">
            <summary>
            INIFile Constructor.
            </summary>
            <PARAM name="INIPath">File Path to the INI File</PARAM>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            Write Data to the INI File
            </summary>
            <param name="section">Section Name</param>
            <param name="key">Key Name</param>
            <param name="value">Value Name</param>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.CheckINIPath">
            <summary>
            Ensure the directory exists for the 
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.IniReadValue(System.String,System.String)">
            <summary>
            Read Data from an INI File
            </summary>
            <param name="section">Section Name</param>
            <param name="key">Key Name</param>
            <returns>Value</returns>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniFile.Path">
            <summary>
            Returns the path to the ini file
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniFile.INIPathWritable">
            <summary>
            Returns True if the INI path is writable
            </summary>
        </member>
        <member name="T:KellermanSoftware.Licensing.Entry">
            <summary>
            Hold Subscription Entries 
            </summary>
        </member>
        <member name="T:KellermanSoftware.Licensing.IniReaderWriter">
            <summary>
            Fully Managed INI File Reader and Writer without any COM Interop
            See:  http://en.wikipedia.org/wiki/INI_file
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetPrivateProfileString(System.String,System.String,System.String,System.String@,System.Int32,System.String)">
            <summary>
            Managed version of GetPrivateProfileString<br/>
            No COM Interop is used<br/>
            If the file does not exist or the value is not in the file, the defaultValue is used.<br/>
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="defaultValue">The default value if there is no value</param>
            <param name="returnedString">Output of the string</param>
            <param name="size">The number of buffer characters (not used but here for backward compatibility)</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>Number of characters returned</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            Managed version of GetPrivateProfileString<br/>
            No COM Interop is used<br/>
            If the file does not exist or the value is not in the file, the defaultValue is used.<br/>
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="defaultValue">The default value if there is no value</param>
            <param name="returnedBuffer">StrinbBuilder Output of the string</param>
            <param name="size">The number of buffer characters (not used but here for backward compatibility)</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>Number of characters returned</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            Managed version of WritePrivateProfileString<br/>
            No COM Interop is used<br/>
            If the file does not exist it will be created.  If the section does not exist it will be created.  If the setting already exists it will be updated.  If the setting does not exist, it will be added.<br/>
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="settingValue">The INI Setting Value</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>True if the setting was set successfully</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetPrivateProfileInt(System.String,System.String,System.Int32,System.String)">
            <summary>
            Managed version of GetPrivateProfileInt<br/>
            No COM Interop is used<br/>
            If the file does not exist or the value is not in the file, the defaultValue is used.<br/>
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="defaultValue">The default value if there is no value</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>The integer</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetSectionNames(System.String)">
            <summary>
            Get a list of the sections in an INI file<br/>
            No COM Interop is used<br/>
            If the file does not exist, no sections will be returned.
            </summary>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when filePath is null</exception>
            <returns>A list of the section names</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetSectionValues(System.String,System.String)">
            <summary>
            Get a dictionary of the key value pairs for a section in an INI file<br/>
            No COM Interop is used<br/>
            If the file does not exist, no items will be returned.
            </summary>
            <param name="sectionName">The section name</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, or filePath is null</exception>
            <returns>A list of the settings and their values</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.SettingExists(System.String,System.String,System.String)">
            <summary>
            Return true if a setting exists<br/>
            No COM Interop is used<br/>
            If the file does not exist or the setting does not exist, the value returned will be false.
            </summary>
            <param name="sectionName">The section name</param>
            <param name="settingName">The setting name</param>
            <param name="filePath">The path to the INI File</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetSetting(System.String,System.String,System.String)">
            <summary>
            Get the value for a setting in a section<br/>
            No COM Interop is used<br/>
            If the file does not exist or the setting does not exist, the value returned will be null.
            </summary>
            <param name="sectionName">The section name</param>
            <param name="settingName">The setting name</param>
            <param name="filePath">The path to the INI File</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.SaveSetting(System.String,System.String,System.String,System.String)">
            <summary>
            Save a value to an INI file<br/>
            No COM Interop is used<br/>
            If the file does not exist it will be created.  If the section does not exist it will be created.  If the setting already exists it will be updated.  If the setting does not exist, it will be added.<br/>
            </summary>
            <param name="sectionName">The section name</param>
            <param name="settingName">The setting name</param>
            <param name="settingValue">The value to set</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>True if it was saved successfully</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.DeleteSetting(System.String,System.String,System.String)">
            <summary>
            Delete a setting from an INI file<br/>
            No COM Interop is used<br/>
            If the file does not exist or the value does not exist, false will be returned.
            </summary>
            <param name="sectionName">The name of the section</param>
            <param name="settingName">The name of the setting</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>True if the setting was deleted</returns>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniReaderWriter.FileEncoding">
            <summary>
            Override the file encoding.  The default is Encoding.Default
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniReaderWriter.IsProcessEscapeCharactersEnabled">
            <summary>
            If true, escape characters will be processed.  The default is false.
            See http://en.wikipedia.org/wiki/INI_file
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniReaderWriter.CommentCharacter">
            <summary>
            The comment character.  By default it is a semicolon
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniReaderWriter.Delimiter">
            <summary>
            The delimiter between settings and values.  By default it is a equals sign
            </summary>
        </member>
        <member name="T:KellermanSoftware.Licensing.Encryption">
            <summary>
            This class provides methods Encryption and Decryption using a variety
            of cryptographic algorithms. The methods are overloaded to perform
            encryption/decryption on ordinary texts of string, a MemoryStream
            or a complete file (text or binary).
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.alg">
            <summary>
            The variable that will hold the relevant instantiated cryptographic class object.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.provider">
            <summary>
            Enumeration that specifies the cryptographic service provider.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.strKey">
            <summary>
            Serves as password used with salt to generate Key for encryption
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.strSalt">
            <summary>
            The salt used for generating Key for encryption
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.ivChars">
            <summary>
            The character array from which we set our initialization vector.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.#ctor">
            <summary>
            Default constructor for the Encryption class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.#ctor(System.String,System.String)">
            <summary>
            Alternate Constructor for the Encryption class.
            </summary>
            <param name="strKey">The password used for generating the Key.</param>
            <param name="strSalt">The Salt to be used in conjunction with 
            the password to generate the actual Key.</param>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.GetIV">
            <summary>
            Get an initialization vector for the crypto algorithms.
            TODO: Random IV Generation
            </summary>
            <returns>a byte array that contains the generated initialization vector.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.GetKey">
            <summary>
            Gets the appropriate key for the cryptographic algorithm being used.
            </summary>
            <returns>a byte array that contains the generated key.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.InitializeAlgorithm(KellermanSoftware.Licensing.EncryptionProvider)">
            <summary>
            Instantiates the SymmetricAlgorithm object with the appropriate
            cryptographic service provider class.
            </summary>
            <param name="encryptionType">Enumeration that specifies which cryptographic
            algorithm is being used.</param>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Encrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String)">
            <summary>
            Encrypts a plain string.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="input">The input clear string.</param>
            <returns>A base64-encoded representation of the encrypted string.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Encrypt(KellermanSoftware.Licensing.EncryptionProvider,System.IO.MemoryStream)">
            <summary>
            Encrypts a MemoryStream.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="memStream">The input MemoryStream object</param>
            <returns>A base64-encoded MemoryStream object</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Encrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String,System.String)">
            <summary>
            Encrypts the contents of a text file and outputs them to another file.
            TODO: Convert to Base64
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="inputFile">The path to the input file.</param>
            <param name="outputFile">The path to the output file.</param>
            <returns>A boolean that specifies whether the encryption operation was successful or not.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Decrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String)">
            <summary>
            Decrypts a base64-encoded string.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="input">The input clear string.</param>
            <returns>The decrypted plain text.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Decrypt(KellermanSoftware.Licensing.EncryptionProvider,System.IO.MemoryStream)">
            <summary>
            Decrypts a base64-encoded MemoryStream.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="memStream">A base64-encoded MemoryStream object.</param>
            <returns>Simple MemoryStream object.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Decrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String,System.String)">
            <summary>
            Decrypts the contents of a text file and outputs them to another file.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="inputFile">The path to the input file.</param>
            <param name="outputFile">The path to the output file.</param>
            <returns>A boolean that specifies whether the decryption operation was successful or not.</returns>
        </member>
        <member name="P:KellermanSoftware.Licensing.Encryption.Key">
            <summary>
            Public property for Key
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.Encryption.Salt">
            <summary>
            Public property for Salt
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="productCode"></param>
            <param name="productName"></param>
            <param name="website"></param>
            <param name="userName"></param>
            <param name="license"></param>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ValidateInput">
            <summary>
            Ensure required input
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.UsDateToString(System.DateTime)">
            <summary>
            Convert a DateTime to a US date string
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.UsDateToDate(System.String)">
            <summary>
            Convert a US formatted date to DateTime
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SetTargetLicense">
            <summary>
            Set the target license for the 
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SetupVariables">
            <summary>
            A bunch of variable initialization
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.StartTrial">
            <summary>
            This is a new installation so start the trial
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.BetaExpired">
            <summary>
            Returns true if the beta has expired
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.AllKeysBlank">
            <summary>
            Returns true if all the keys are blank
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SomeKeysBlank">
            <summary>
            Returns true if some of the keys are blank
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetKeys">
            <summary>
            Get all the keys from the registry and the INI file
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetTrialExtensions">
            <summary>
            Get the number of trial extensions
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetFailedAttemptsToday">
            <summary>
            Get the number of failed attempts today
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetUserName">
            <summary>
            Get the saved user name from the registry
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetLicense">
            <summary>
            Get the saved user name from the registry
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetLastRunDate">
            <summary>
            Get the last date the component was run, prevents back dating
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetInstallationDate">
            <summary>
            Get the date the component was installed
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.CombineKey(System.String)">
            <summary>
            Combine the key for the 
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ReadFromIni(System.String)">
            <summary>
            Read the key from the INI file
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ReadFromRegistry(System.String)">
            <summary>
            Read the key from the registry
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SaveToRegistryAndIni(System.String,System.String)">
            <summary>
            Save the key and value to the registry and INI file.  
            Use the different encryption key for each.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SaveToRegistry(System.String,System.String)">
            <summary>
            Save the key to the registry
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SaveToIniFile(System.String,System.String)">
            <summary>
            Save a key to an INI file
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.UpperLetterSpace(System.String)">
            <summary>
            Make the text upper case and return only letters and spaces
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetProductShortName(System.String)">
            <summary>
            Extract product short name from the given product code.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetMajorVersion(System.String)">
            <summary>
            Extract major version from the given product code.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ExtendTrial(System.String)">
            <summary>
            Trial extensions are good for the current day and the the next day
            </summary>
            <param name="trialExtension"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.TrialMessage">
            <summary>
            User friendly trial days remaining
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.TrialDaysLeft">
            <summary>
            Returns the number of days left in the trial
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.CheckLicense">
            <summary>
            Check to see if it is a valid license OR the user is within the trial period
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.TrialValid">
            <summary>
            Returns true if the trial is valid, false if it is expired, hacked, or backdated
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Mid(System.Object,System.Int32,System.Int32)">
            <summary>
            Same as VB mid function except it doesn't bomb at all
            </summary>
            <param name="oString">String to parse</param>
            <param name="iStart">Start of string</param>
            <param name="iLength">Length of section</param>
            <returns>Section of string</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Mid(System.Object,System.Int32)">
            <summary>
            Same as VB mid function except it doesn't bomb at all
            </summary>
            <param name="oString">String to parse</param>
            <param name="iStart">Starting position</param>
            <returns>The string section</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Asc(System.String)">
            <summary>
            Get the ASCII value for the left most character of the passed string.
            </summary>
            <param name="sInString">The string to parse.</param>
            <returns>ACSCII value of the leftmost character</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Right(System.Object,System.Int32)">
            <summary>
            Same as VB function but doesn't bomb
            </summary>
            <param name="oString">The string to parse</param>
            <param name="iLength">Starting Right Position</param>
            <returns>String section</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetLastWord(System.String,System.String)">
            <summary>
            Get the last word in a string
            </summary>
            <param name="sSentence"></param>
            <param name="sSeperator"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.NumberOfWords(System.String,System.String)">
            <summary>
            Calculate the number of words in a string
            </summary>
            <param name="sSentence">String to parse</param>
            <param name="sSeperator">Seperator character or string</param>
            <returns>The number of words in the string</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetField(System.String,System.Int32,System.String)">
            <summary>
            Parses sSentence delimited by sSeperator and returns the word specified by iPosition
            </summary>
            <param name="sSentence">The string to parse</param>
            <param name="iPosition">Which word to look for</param>
            <param name="sSeperator">What the words are delmited by</param>
            <returns>"" or the word found</returns>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.AdditionalInfo">
            <summary>
            Additional information about the success or failure of a public method
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.FailedAttemptsToday">
            <summary>
            The failed attempts at checking a license today
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.TrialExtensions">
            <summary>
            The number of trial extensions for this user
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.TrialDays">
            <summary>
            The number of days for a trial period
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.BetaExpirationDate">
            <summary>
            Returns the maximum date the software can run in beta
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.IsService">
            <summary>
            Gets a value indicating whether the application is a windows service.
            </summary>
            <value>
            <c>true</c> if this instance is service; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:KellermanSoftware.Common.Util.ExtractPath(System.String)">
            <summary>
            Extract the path from a path ending in a filename 
            </summary>
            <param name="fullPath">A fully qualified path ending in a filename</param>
            <returns>The extacted path</returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.Writable(System.String)">
            <summary>
            Check to see if the program can create, update, and delete in the specified path.
            </summary>
            <param name="path">The path to check.</param>
            <returns>True if the path is writable.</returns>
        </member>
        <member name="T:KellermanSoftware.USPSStandardization.StandardizationLogic">
            <summary>
            USPS Address Standardization.  
            Implemented from USPS Publication 28: http://pe.usps.gov/cpim/ftp/pubs/pub28/pub28.pdf
            </summary>
        </member>
        <member name="M:KellermanSoftware.USPSStandardization.StandardizationLogic.#ctor">
            <summary>
            Constructor for trial mode
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //Trial Mode
            StandardizationLogic standardizationLogic = new StandardizationLogic();
             
            //License Mode
            StandardizationLogic standardizationLogic2 = new StandardizationLogic("John Smith 10000", "asdf;ljkasdfk==");</code>
            	<code title="Example2" description="" lang="VB.NET">
            'Trial Mode
            Dim standardizationLogic As New StandardizationLogic()
             
            'License Mode
            Dim standardizationLogic2 As New StandardizationLogic("John Smith 10000", "asdf;ljkasdfk==")</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.USPSStandardization.StandardizationLogic.#ctor(System.String,System.String)">
            <summary>
            Constructor for licensed mode
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //Trial Mode
            StandardizationLogic standardizationLogic = new StandardizationLogic();
             
            //License Mode
            StandardizationLogic standardizationLogic2 = new StandardizationLogic("John Smith 10000", "asdf;ljkasdfk==");</code>
            	<code title="Example2" description="" lang="VB.NET">
            'Trial Mode
            Dim standardizationLogic As New StandardizationLogic()
             
            'License Mode
            Dim standardizationLogic2 As New StandardizationLogic("John Smith 10000", "asdf;ljkasdfk==")</code>
            </example>
            <param name="userName">The user name from the receipt</param>
            <param name="license">The license from the receipt</param>
        </member>
        <member name="M:KellermanSoftware.USPSStandardization.StandardizationLogic.CheckLicense(System.String,System.String)">
            <summary>
            The variables below are specific to the licensing component
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.USPSStandardization.StandardizationLogic.StandardizeStreetAddress(System.String)">
            <summary>
            Standardize a street address using conventions from USPS Publication 28: http://pe.usps.gov/cpim/ftp/pubs/pub28/pub28.pdf
            </summary>
            <param name="address">The address to standardize</param>
            <returns>A standardized address</returns>
            <example>
            	<code title="Example" description="" lang="CS">
            //Trial Mode
            StandardizationLogic standardization = new StandardizationLogic();
             
            //License Mode
            StandardizationLogic standardization2 = new StandardizationLogic("John Smith 101", "asdfou==");
             
            string addressToStandardize = "1500 Serpentine Road, Suite 100";
            string result = standardization.StandardizeStreetAddress(addressToStandardize);
             
            //This will output: 1500 SERPENTINE RD STE 100
            Console.WriteLine(result);</code>
            	<code title="Example2" description="" lang="VB.NET">
            'Trial Mode
            Dim standardization As New StandardizationLogic()
             
            'License Mode
            Dim standardization2 As New StandardizationLogic("John Smith 101", "asdfou==")
             
            Dim addressToStandardize As String = "1500 Serpentine Road, Suite 100"
            Dim result As String = standardization.StandardizeStreetAddress(addressToStandardize)
             
            'This will output: 1500 SERPENTINE RD STE 100
            Console.WriteLine(result)</code>
            </example>
        </member>
    </members>
</doc>
